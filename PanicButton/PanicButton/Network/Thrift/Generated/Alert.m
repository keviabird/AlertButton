/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "Alert.h"

@implementation AlertThriftThriftException

- (id) init
{
  return [super initWithName: @"ThriftException" reason: @"unknown" userInfo: nil];
}

- (id) initWithTypeCode: (int) typeCode displayMessage: (NSString *) displayMessage logMessage: (NSString *) logMessage url: (NSString *) url
{
  self = [self init];
  __typeCode = typeCode;
  __typeCode_isset = YES;
  __displayMessage = [displayMessage retain_stub];
  __displayMessage_isset = YES;
  __logMessage = [logMessage retain_stub];
  __logMessage_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"typeCode"])
  {
    __typeCode = [decoder decodeIntForKey: @"typeCode"];
    __typeCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"displayMessage"])
  {
    __displayMessage = [[decoder decodeObjectForKey: @"displayMessage"] retain_stub];
    __displayMessage_isset = YES;
  }
  if ([decoder containsValueForKey: @"logMessage"])
  {
    __logMessage = [[decoder decodeObjectForKey: @"logMessage"] retain_stub];
    __logMessage_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__typeCode_isset)
  {
    [encoder encodeInt: __typeCode forKey: @"typeCode"];
  }
  if (__displayMessage_isset)
  {
    [encoder encodeObject: __displayMessage forKey: @"displayMessage"];
  }
  if (__logMessage_isset)
  {
    [encoder encodeObject: __logMessage forKey: @"logMessage"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
}

- (void) dealloc
{
  [__displayMessage release_stub];
  [__logMessage release_stub];
  [__url release_stub];
  [super dealloc_stub];
}

- (int) typeCode {
  return __typeCode;
}

- (void) setTypeCode: (int) typeCode {
  __typeCode = typeCode;
  __typeCode_isset = YES;
}

- (BOOL) typeCodeIsSet {
  return __typeCode_isset;
}

- (void) unsetTypeCode {
  __typeCode_isset = NO;
}

- (NSString *) displayMessage {
  return [[__displayMessage retain_stub] autorelease_stub];
}

- (void) setDisplayMessage: (NSString *) displayMessage {
  [displayMessage retain_stub];
  [__displayMessage release_stub];
  __displayMessage = displayMessage;
  __displayMessage_isset = YES;
}

- (BOOL) displayMessageIsSet {
  return __displayMessage_isset;
}

- (void) unsetDisplayMessage {
  [__displayMessage release_stub];
  __displayMessage = nil;
  __displayMessage_isset = NO;
}

- (NSString *) logMessage {
  return [[__logMessage retain_stub] autorelease_stub];
}

- (void) setLogMessage: (NSString *) logMessage {
  [logMessage retain_stub];
  [__logMessage release_stub];
  __logMessage = logMessage;
  __logMessage_isset = YES;
}

- (BOOL) logMessageIsSet {
  return __logMessage_isset;
}

- (void) unsetLogMessage {
  [__logMessage release_stub];
  __logMessage = nil;
  __logMessage_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setTypeCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisplayMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLogMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftException"];
  if (__typeCode_isset) {
    [outProtocol writeFieldBeginWithName: @"typeCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __typeCode];
    [outProtocol writeFieldEnd];
  }
  if (__displayMessage_isset) {
    if (__displayMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"displayMessage" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __displayMessage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logMessage_isset) {
    if (__logMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"logMessage" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __logMessage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftException("];
  [ms appendString: @"typeCode:"];
  [ms appendFormat: @"%i", __typeCode];
  [ms appendString: @",displayMessage:"];
  [ms appendFormat: @"\"%@\"", __displayMessage];
  [ms appendString: @",logMessage:"];
  [ms appendFormat: @"\"%@\"", __logMessage];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AlertThriftThriftRequestBase

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithProtocolVersion: (NSString *) protocolVersion deviceId: (NSString *) deviceId userLogin: (NSString *) userLogin authToken: (NSString *) authToken clientPlatform: (int) clientPlatform pushToken: (NSString *) pushToken currentLanguage: (NSString *) currentLanguage clientVersion: (NSString *) clientVersion
{
  self = [super init];
  __protocolVersion = [protocolVersion retain_stub];
  __protocolVersion_isset = YES;
  __deviceId = [deviceId retain_stub];
  __deviceId_isset = YES;
  __userLogin = [userLogin retain_stub];
  __userLogin_isset = YES;
  __authToken = [authToken retain_stub];
  __authToken_isset = YES;
  __clientPlatform = clientPlatform;
  __clientPlatform_isset = YES;
  __pushToken = [pushToken retain_stub];
  __pushToken_isset = YES;
  __currentLanguage = [currentLanguage retain_stub];
  __currentLanguage_isset = YES;
  __clientVersion = [clientVersion retain_stub];
  __clientVersion_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"protocolVersion"])
  {
    __protocolVersion = [[decoder decodeObjectForKey: @"protocolVersion"] retain_stub];
    __protocolVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [[decoder decodeObjectForKey: @"deviceId"] retain_stub];
    __deviceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"userLogin"])
  {
    __userLogin = [[decoder decodeObjectForKey: @"userLogin"] retain_stub];
    __userLogin_isset = YES;
  }
  if ([decoder containsValueForKey: @"authToken"])
  {
    __authToken = [[decoder decodeObjectForKey: @"authToken"] retain_stub];
    __authToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientPlatform"])
  {
    __clientPlatform = [decoder decodeIntForKey: @"clientPlatform"];
    __clientPlatform_isset = YES;
  }
  if ([decoder containsValueForKey: @"pushToken"])
  {
    __pushToken = [[decoder decodeObjectForKey: @"pushToken"] retain_stub];
    __pushToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"currentLanguage"])
  {
    __currentLanguage = [[decoder decodeObjectForKey: @"currentLanguage"] retain_stub];
    __currentLanguage_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientVersion"])
  {
    __clientVersion = [[decoder decodeObjectForKey: @"clientVersion"] retain_stub];
    __clientVersion_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__protocolVersion_isset)
  {
    [encoder encodeObject: __protocolVersion forKey: @"protocolVersion"];
  }
  if (__deviceId_isset)
  {
    [encoder encodeObject: __deviceId forKey: @"deviceId"];
  }
  if (__userLogin_isset)
  {
    [encoder encodeObject: __userLogin forKey: @"userLogin"];
  }
  if (__authToken_isset)
  {
    [encoder encodeObject: __authToken forKey: @"authToken"];
  }
  if (__clientPlatform_isset)
  {
    [encoder encodeInt: __clientPlatform forKey: @"clientPlatform"];
  }
  if (__pushToken_isset)
  {
    [encoder encodeObject: __pushToken forKey: @"pushToken"];
  }
  if (__currentLanguage_isset)
  {
    [encoder encodeObject: __currentLanguage forKey: @"currentLanguage"];
  }
  if (__clientVersion_isset)
  {
    [encoder encodeObject: __clientVersion forKey: @"clientVersion"];
  }
}

- (void) dealloc
{
  [__protocolVersion release_stub];
  [__deviceId release_stub];
  [__userLogin release_stub];
  [__authToken release_stub];
  [__pushToken release_stub];
  [__currentLanguage release_stub];
  [__clientVersion release_stub];
  [super dealloc_stub];
}

- (NSString *) protocolVersion {
  return [[__protocolVersion retain_stub] autorelease_stub];
}

- (void) setProtocolVersion: (NSString *) protocolVersion {
  [protocolVersion retain_stub];
  [__protocolVersion release_stub];
  __protocolVersion = protocolVersion;
  __protocolVersion_isset = YES;
}

- (BOOL) protocolVersionIsSet {
  return __protocolVersion_isset;
}

- (void) unsetProtocolVersion {
  [__protocolVersion release_stub];
  __protocolVersion = nil;
  __protocolVersion_isset = NO;
}

- (NSString *) deviceId {
  return [[__deviceId retain_stub] autorelease_stub];
}

- (void) setDeviceId: (NSString *) deviceId {
  [deviceId retain_stub];
  [__deviceId release_stub];
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  [__deviceId release_stub];
  __deviceId = nil;
  __deviceId_isset = NO;
}

- (NSString *) userLogin {
  return [[__userLogin retain_stub] autorelease_stub];
}

- (void) setUserLogin: (NSString *) userLogin {
  [userLogin retain_stub];
  [__userLogin release_stub];
  __userLogin = userLogin;
  __userLogin_isset = YES;
}

- (BOOL) userLoginIsSet {
  return __userLogin_isset;
}

- (void) unsetUserLogin {
  [__userLogin release_stub];
  __userLogin = nil;
  __userLogin_isset = NO;
}

- (NSString *) authToken {
  return [[__authToken retain_stub] autorelease_stub];
}

- (void) setAuthToken: (NSString *) authToken {
  [authToken retain_stub];
  [__authToken release_stub];
  __authToken = authToken;
  __authToken_isset = YES;
}

- (BOOL) authTokenIsSet {
  return __authToken_isset;
}

- (void) unsetAuthToken {
  [__authToken release_stub];
  __authToken = nil;
  __authToken_isset = NO;
}

- (int) clientPlatform {
  return __clientPlatform;
}

- (void) setClientPlatform: (int) clientPlatform {
  __clientPlatform = clientPlatform;
  __clientPlatform_isset = YES;
}

- (BOOL) clientPlatformIsSet {
  return __clientPlatform_isset;
}

- (void) unsetClientPlatform {
  __clientPlatform_isset = NO;
}

- (NSString *) pushToken {
  return [[__pushToken retain_stub] autorelease_stub];
}

- (void) setPushToken: (NSString *) pushToken {
  [pushToken retain_stub];
  [__pushToken release_stub];
  __pushToken = pushToken;
  __pushToken_isset = YES;
}

- (BOOL) pushTokenIsSet {
  return __pushToken_isset;
}

- (void) unsetPushToken {
  [__pushToken release_stub];
  __pushToken = nil;
  __pushToken_isset = NO;
}

- (NSString *) currentLanguage {
  return [[__currentLanguage retain_stub] autorelease_stub];
}

- (void) setCurrentLanguage: (NSString *) currentLanguage {
  [currentLanguage retain_stub];
  [__currentLanguage release_stub];
  __currentLanguage = currentLanguage;
  __currentLanguage_isset = YES;
}

- (BOOL) currentLanguageIsSet {
  return __currentLanguage_isset;
}

- (void) unsetCurrentLanguage {
  [__currentLanguage release_stub];
  __currentLanguage = nil;
  __currentLanguage_isset = NO;
}

- (NSString *) clientVersion {
  return [[__clientVersion retain_stub] autorelease_stub];
}

- (void) setClientVersion: (NSString *) clientVersion {
  [clientVersion retain_stub];
  [__clientVersion release_stub];
  __clientVersion = clientVersion;
  __clientVersion_isset = YES;
}

- (BOOL) clientVersionIsSet {
  return __clientVersion_isset;
}

- (void) unsetClientVersion {
  [__clientVersion release_stub];
  __clientVersion = nil;
  __clientVersion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProtocolVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserLogin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setClientPlatform: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPushToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCurrentLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClientVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftRequestBase"];
  if (__protocolVersion_isset) {
    if (__protocolVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"protocolVersion" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __protocolVersion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deviceId_isset) {
    if (__deviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __deviceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userLogin_isset) {
    if (__userLogin != nil) {
      [outProtocol writeFieldBeginWithName: @"userLogin" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __userLogin];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authToken_isset) {
    if (__authToken != nil) {
      [outProtocol writeFieldBeginWithName: @"authToken" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __authToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clientPlatform_isset) {
    [outProtocol writeFieldBeginWithName: @"clientPlatform" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __clientPlatform];
    [outProtocol writeFieldEnd];
  }
  if (__pushToken_isset) {
    if (__pushToken != nil) {
      [outProtocol writeFieldBeginWithName: @"pushToken" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __pushToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__currentLanguage_isset) {
    if (__currentLanguage != nil) {
      [outProtocol writeFieldBeginWithName: @"currentLanguage" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __currentLanguage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clientVersion_isset) {
    if (__clientVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"clientVersion" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __clientVersion];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftRequestBase("];
  [ms appendString: @"protocolVersion:"];
  [ms appendFormat: @"\"%@\"", __protocolVersion];
  [ms appendString: @",deviceId:"];
  [ms appendFormat: @"\"%@\"", __deviceId];
  [ms appendString: @",userLogin:"];
  [ms appendFormat: @"\"%@\"", __userLogin];
  [ms appendString: @",authToken:"];
  [ms appendFormat: @"\"%@\"", __authToken];
  [ms appendString: @",clientPlatform:"];
  [ms appendFormat: @"%i", __clientPlatform];
  [ms appendString: @",pushToken:"];
  [ms appendFormat: @"\"%@\"", __pushToken];
  [ms appendString: @",currentLanguage:"];
  [ms appendFormat: @"\"%@\"", __currentLanguage];
  [ms appendString: @",clientVersion:"];
  [ms appendFormat: @"\"%@\"", __clientVersion];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AlertThriftThriftPingResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithServerTimestamp: (int64_t) serverTimestamp newVersionAvailable: (BOOL) newVersionAvailable updateUrl: (NSString *) updateUrl updateMessage: (NSString *) updateMessage shouldCleanClientData: (BOOL) shouldCleanClientData
{
  self = [super init];
  __serverTimestamp = serverTimestamp;
  __serverTimestamp_isset = YES;
  __newVersionAvailable = newVersionAvailable;
  __newVersionAvailable_isset = YES;
  __updateUrl = [updateUrl retain_stub];
  __updateUrl_isset = YES;
  __updateMessage = [updateMessage retain_stub];
  __updateMessage_isset = YES;
  __shouldCleanClientData = shouldCleanClientData;
  __shouldCleanClientData_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serverTimestamp"])
  {
    __serverTimestamp = [decoder decodeInt64ForKey: @"serverTimestamp"];
    __serverTimestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"newVersionAvailable"])
  {
    __newVersionAvailable = [decoder decodeBoolForKey: @"newVersionAvailable"];
    __newVersionAvailable_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateUrl"])
  {
    __updateUrl = [[decoder decodeObjectForKey: @"updateUrl"] retain_stub];
    __updateUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateMessage"])
  {
    __updateMessage = [[decoder decodeObjectForKey: @"updateMessage"] retain_stub];
    __updateMessage_isset = YES;
  }
  if ([decoder containsValueForKey: @"shouldCleanClientData"])
  {
    __shouldCleanClientData = [decoder decodeBoolForKey: @"shouldCleanClientData"];
    __shouldCleanClientData_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serverTimestamp_isset)
  {
    [encoder encodeInt64: __serverTimestamp forKey: @"serverTimestamp"];
  }
  if (__newVersionAvailable_isset)
  {
    [encoder encodeBool: __newVersionAvailable forKey: @"newVersionAvailable"];
  }
  if (__updateUrl_isset)
  {
    [encoder encodeObject: __updateUrl forKey: @"updateUrl"];
  }
  if (__updateMessage_isset)
  {
    [encoder encodeObject: __updateMessage forKey: @"updateMessage"];
  }
  if (__shouldCleanClientData_isset)
  {
    [encoder encodeBool: __shouldCleanClientData forKey: @"shouldCleanClientData"];
  }
}

- (void) dealloc
{
  [__updateUrl release_stub];
  [__updateMessage release_stub];
  [super dealloc_stub];
}

- (int64_t) serverTimestamp {
  return __serverTimestamp;
}

- (void) setServerTimestamp: (int64_t) serverTimestamp {
  __serverTimestamp = serverTimestamp;
  __serverTimestamp_isset = YES;
}

- (BOOL) serverTimestampIsSet {
  return __serverTimestamp_isset;
}

- (void) unsetServerTimestamp {
  __serverTimestamp_isset = NO;
}

- (BOOL) newVersionAvailable {
  return __newVersionAvailable;
}

- (void) setNewVersionAvailable: (BOOL) newVersionAvailable {
  __newVersionAvailable = newVersionAvailable;
  __newVersionAvailable_isset = YES;
}

- (BOOL) newVersionAvailableIsSet {
  return __newVersionAvailable_isset;
}

- (void) unsetNewVersionAvailable {
  __newVersionAvailable_isset = NO;
}

- (NSString *) updateUrl {
  return [[__updateUrl retain_stub] autorelease_stub];
}

- (void) setUpdateUrl: (NSString *) updateUrl {
  [updateUrl retain_stub];
  [__updateUrl release_stub];
  __updateUrl = updateUrl;
  __updateUrl_isset = YES;
}

- (BOOL) updateUrlIsSet {
  return __updateUrl_isset;
}

- (void) unsetUpdateUrl {
  [__updateUrl release_stub];
  __updateUrl = nil;
  __updateUrl_isset = NO;
}

- (NSString *) updateMessage {
  return [[__updateMessage retain_stub] autorelease_stub];
}

- (void) setUpdateMessage: (NSString *) updateMessage {
  [updateMessage retain_stub];
  [__updateMessage release_stub];
  __updateMessage = updateMessage;
  __updateMessage_isset = YES;
}

- (BOOL) updateMessageIsSet {
  return __updateMessage_isset;
}

- (void) unsetUpdateMessage {
  [__updateMessage release_stub];
  __updateMessage = nil;
  __updateMessage_isset = NO;
}

- (BOOL) shouldCleanClientData {
  return __shouldCleanClientData;
}

- (void) setShouldCleanClientData: (BOOL) shouldCleanClientData {
  __shouldCleanClientData = shouldCleanClientData;
  __shouldCleanClientData_isset = YES;
}

- (BOOL) shouldCleanClientDataIsSet {
  return __shouldCleanClientData_isset;
}

- (void) unsetShouldCleanClientData {
  __shouldCleanClientData_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setServerTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNewVersionAvailable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUpdateUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUpdateMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setShouldCleanClientData: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftPingResponse"];
  if (__serverTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"serverTimestamp" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __serverTimestamp];
    [outProtocol writeFieldEnd];
  }
  if (__newVersionAvailable_isset) {
    [outProtocol writeFieldBeginWithName: @"newVersionAvailable" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __newVersionAvailable];
    [outProtocol writeFieldEnd];
  }
  if (__updateUrl_isset) {
    if (__updateUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"updateUrl" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __updateUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__updateMessage_isset) {
    if (__updateMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"updateMessage" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __updateMessage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__shouldCleanClientData_isset) {
    [outProtocol writeFieldBeginWithName: @"shouldCleanClientData" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __shouldCleanClientData];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftPingResponse("];
  [ms appendString: @"serverTimestamp:"];
  [ms appendFormat: @"%qi", __serverTimestamp];
  [ms appendString: @",newVersionAvailable:"];
  [ms appendFormat: @"%i", __newVersionAvailable];
  [ms appendString: @",updateUrl:"];
  [ms appendFormat: @"\"%@\"", __updateUrl];
  [ms appendString: @",updateMessage:"];
  [ms appendFormat: @"\"%@\"", __updateMessage];
  [ms appendString: @",shouldCleanClientData:"];
  [ms appendFormat: @"%i", __shouldCleanClientData];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AlertThriftThrifAlertLocationRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommonBase: (AlertThriftThriftRequestBase *) commonBase latitude: (double) latitude longtitude: (double) longtitude
{
  self = [super init];
  __commonBase = [commonBase retain_stub];
  __commonBase_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __longtitude = longtitude;
  __longtitude_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commonBase"])
  {
    __commonBase = [[decoder decodeObjectForKey: @"commonBase"] retain_stub];
    __commonBase_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longtitude"])
  {
    __longtitude = [decoder decodeDoubleForKey: @"longtitude"];
    __longtitude_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commonBase_isset)
  {
    [encoder encodeObject: __commonBase forKey: @"commonBase"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__longtitude_isset)
  {
    [encoder encodeDouble: __longtitude forKey: @"longtitude"];
  }
}

- (void) dealloc
{
  [__commonBase release_stub];
  [super dealloc_stub];
}

- (AlertThriftThriftRequestBase *) commonBase {
  return [[__commonBase retain_stub] autorelease_stub];
}

- (void) setCommonBase: (AlertThriftThriftRequestBase *) commonBase {
  [commonBase retain_stub];
  [__commonBase release_stub];
  __commonBase = commonBase;
  __commonBase_isset = YES;
}

- (BOOL) commonBaseIsSet {
  return __commonBase_isset;
}

- (void) unsetCommonBase {
  [__commonBase release_stub];
  __commonBase = nil;
  __commonBase_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (double) longtitude {
  return __longtitude;
}

- (void) setLongtitude: (double) longtitude {
  __longtitude = longtitude;
  __longtitude_isset = YES;
}

- (BOOL) longtitudeIsSet {
  return __longtitude_isset;
}

- (void) unsetLongtitude {
  __longtitude_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AlertThriftThriftRequestBase *fieldValue = [[AlertThriftThriftRequestBase alloc] init];
          [fieldValue read: inProtocol];
          [self setCommonBase: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongtitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThrifAlertLocationRequest"];
  if (__commonBase_isset) {
    if (__commonBase != nil) {
      [outProtocol writeFieldBeginWithName: @"commonBase" type: TType_STRUCT fieldID: 1];
      [__commonBase write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longtitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longtitude" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __longtitude];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThrifAlertLocationRequest("];
  [ms appendString: @"commonBase:"];
  [ms appendFormat: @"%@", __commonBase];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",longtitude:"];
  [ms appendFormat: @"%f", __longtitude];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation AlertThriftAlertConstants
+ (void) initialize {
}
@end

@interface AlertThriftping_args : NSObject <TBase, NSCoding> {
  AlertThriftThriftRequestBase * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AlertThriftThriftRequestBase * request;
#endif

- (id) init;
- (id) initWithRequest: (AlertThriftThriftRequestBase *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AlertThriftThriftRequestBase *) request;
- (void) setRequest: (AlertThriftThriftRequestBase *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation AlertThriftping_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AlertThriftThriftRequestBase *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AlertThriftThriftRequestBase *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AlertThriftThriftRequestBase *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AlertThriftThriftRequestBase *fieldValue = [[AlertThriftThriftRequestBase alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ping_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ping_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AlertThriftPing_result : NSObject <TBase, NSCoding> {
  AlertThriftThriftPingResponse * __success;
  AlertThriftThriftException * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AlertThriftThriftPingResponse * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) AlertThriftThriftException * ex;
#endif

- (id) init;
- (id) initWithSuccess: (AlertThriftThriftPingResponse *) success ex: (AlertThriftThriftException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AlertThriftThriftPingResponse *) success;
- (void) setSuccess: (AlertThriftThriftPingResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AlertThriftThriftException *) ex;
- (void) setEx: (AlertThriftThriftException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation AlertThriftPing_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AlertThriftThriftPingResponse *) success ex: (AlertThriftThriftException *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (AlertThriftThriftPingResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AlertThriftThriftPingResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AlertThriftThriftException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (AlertThriftThriftException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AlertThriftThriftPingResponse *fieldValue = [[AlertThriftThriftPingResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AlertThriftThriftException *fieldValue = [[AlertThriftThriftException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Ping_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Ping_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AlertThriftauthorize_args : NSObject <TBase, NSCoding> {
  AlertThriftThriftRequestBase * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AlertThriftThriftRequestBase * request;
#endif

- (id) init;
- (id) initWithRequest: (AlertThriftThriftRequestBase *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AlertThriftThriftRequestBase *) request;
- (void) setRequest: (AlertThriftThriftRequestBase *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation AlertThriftauthorize_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AlertThriftThriftRequestBase *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AlertThriftThriftRequestBase *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AlertThriftThriftRequestBase *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AlertThriftThriftRequestBase *fieldValue = [[AlertThriftThriftRequestBase alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"authorize_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"authorize_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AlertThriftAuthorize_result : NSObject <TBase, NSCoding> {
  AlertThriftThriftException * __ex;

  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ex, setter=setEx:) AlertThriftThriftException * ex;
#endif

- (id) init;
- (id) initWithEx: (AlertThriftThriftException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AlertThriftThriftException *) ex;
- (void) setEx: (AlertThriftThriftException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation AlertThriftAuthorize_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEx: (AlertThriftThriftException *) ex
{
  self = [super init];
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__ex release_stub];
  [super dealloc_stub];
}

- (AlertThriftThriftException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (AlertThriftThriftException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AlertThriftThriftException *fieldValue = [[AlertThriftThriftException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Authorize_result"];

  if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Authorize_result("];
  [ms appendString: @"ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AlertThriftalert_args : NSObject <TBase, NSCoding> {
  AlertThriftThrifAlertLocationRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AlertThriftThrifAlertLocationRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (AlertThriftThrifAlertLocationRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AlertThriftThrifAlertLocationRequest *) request;
- (void) setRequest: (AlertThriftThrifAlertLocationRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation AlertThriftalert_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AlertThriftThrifAlertLocationRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AlertThriftThrifAlertLocationRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AlertThriftThrifAlertLocationRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AlertThriftThrifAlertLocationRequest *fieldValue = [[AlertThriftThrifAlertLocationRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"alert_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"alert_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AlertThriftAlert_result : NSObject <TBase, NSCoding> {
  AlertThriftThriftException * __ex;

  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ex, setter=setEx:) AlertThriftThriftException * ex;
#endif

- (id) init;
- (id) initWithEx: (AlertThriftThriftException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AlertThriftThriftException *) ex;
- (void) setEx: (AlertThriftThriftException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation AlertThriftAlert_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEx: (AlertThriftThriftException *) ex
{
  self = [super init];
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__ex release_stub];
  [super dealloc_stub];
}

- (AlertThriftThriftException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (AlertThriftThriftException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AlertThriftThriftException *fieldValue = [[AlertThriftThriftException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Alert_result"];

  if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Alert_result("];
  [ms appendString: @"ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AlertThriftlocation_args : NSObject <TBase, NSCoding> {
  AlertThriftThrifAlertLocationRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AlertThriftThrifAlertLocationRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (AlertThriftThrifAlertLocationRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AlertThriftThrifAlertLocationRequest *) request;
- (void) setRequest: (AlertThriftThrifAlertLocationRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation AlertThriftlocation_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AlertThriftThrifAlertLocationRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AlertThriftThrifAlertLocationRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AlertThriftThrifAlertLocationRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AlertThriftThrifAlertLocationRequest *fieldValue = [[AlertThriftThrifAlertLocationRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"location_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"location_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AlertThriftLocation_result : NSObject <TBase, NSCoding> {
  AlertThriftThriftException * __ex;

  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ex, setter=setEx:) AlertThriftThriftException * ex;
#endif

- (id) init;
- (id) initWithEx: (AlertThriftThriftException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AlertThriftThriftException *) ex;
- (void) setEx: (AlertThriftThriftException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation AlertThriftLocation_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEx: (AlertThriftThriftException *) ex
{
  self = [super init];
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__ex release_stub];
  [super dealloc_stub];
}

- (AlertThriftThriftException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (AlertThriftThriftException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AlertThriftThriftException *fieldValue = [[AlertThriftThriftException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Location_result"];

  if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Location_result("];
  [ms appendString: @"ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AlertThriftThriftAlertServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_ping: (AlertThriftThriftRequestBase *) request
{
  [outProtocol writeMessageBeginWithName: @"ping" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"ping_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (AlertThriftThriftPingResponse *) recv_ping
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  AlertThriftPing_result * result = [[[AlertThriftPing_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"ping failed: unknown result"];
}

- (AlertThriftThriftPingResponse *) ping: (AlertThriftThriftRequestBase *) request
{
  [self send_ping : request];
  return [self recv_ping];
}

- (void) send_authorize: (AlertThriftThriftRequestBase *) request
{
  [outProtocol writeMessageBeginWithName: @"authorize" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"authorize_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_authorize
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  AlertThriftAuthorize_result * result = [[[AlertThriftAuthorize_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result exIsSet]) {
    @throw [result ex];
  }
  return;
}

- (void) authorize: (AlertThriftThriftRequestBase *) request
{
  [self send_authorize : request];
  [self recv_authorize];
}

- (void) send_alert: (AlertThriftThrifAlertLocationRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"alert" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"alert_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_alert
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  AlertThriftAlert_result * result = [[[AlertThriftAlert_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result exIsSet]) {
    @throw [result ex];
  }
  return;
}

- (void) alert: (AlertThriftThrifAlertLocationRequest *) request
{
  [self send_alert : request];
  [self recv_alert];
}

- (void) send_location: (AlertThriftThrifAlertLocationRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"location" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"location_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_location
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  AlertThriftLocation_result * result = [[[AlertThriftLocation_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result exIsSet]) {
    @throw [result ex];
  }
  return;
}

- (void) location: (AlertThriftThrifAlertLocationRequest *) request
{
  [self send_location : request];
  [self recv_location];
}

@end

@implementation AlertThriftThriftAlertServiceProcessor

- (id) initWithThriftAlertService: (id <AlertThriftThriftAlertService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_ping_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"ping"];
  }
  {
    SEL s = @selector(process_authorize_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"authorize"];
  }
  {
    SEL s = @selector(process_alert_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"alert"];
  }
  {
    SEL s = @selector(process_location_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"location"];
  }
  return self;
}

- (id<AlertThriftThriftAlertService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_ping_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  AlertThriftping_args * args = [[AlertThriftping_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  AlertThriftPing_result * result = [[AlertThriftPing_result alloc] init];
  [result setSuccess: [mService ping: [args request]]];
  [outProtocol writeMessageBeginWithName: @"ping"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_authorize_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  AlertThriftauthorize_args * args = [[AlertThriftauthorize_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  AlertThriftAuthorize_result * result = [[AlertThriftAuthorize_result alloc] init];
  [mService authorize: [args request]];
  [outProtocol writeMessageBeginWithName: @"authorize"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_alert_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  AlertThriftalert_args * args = [[AlertThriftalert_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  AlertThriftAlert_result * result = [[AlertThriftAlert_result alloc] init];
  [mService alert: [args request]];
  [outProtocol writeMessageBeginWithName: @"alert"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_location_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  AlertThriftlocation_args * args = [[AlertThriftlocation_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  AlertThriftLocation_result * result = [[AlertThriftLocation_result alloc] init];
  [mService location: [args request]];
  [outProtocol writeMessageBeginWithName: @"location"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

